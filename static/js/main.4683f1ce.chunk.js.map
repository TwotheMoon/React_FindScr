{"version":3,"sources":["api.ts","atoms.ts","routes/ScrMain.tsx","Router.tsx","theme.ts","App.tsx","index.tsx"],"names":["fetchScr","fetch","then","response","json","isDarkAtom","atom","key","default","Container","styled","div","props","theme","scrTextColor","MapContainer","Header","header","Title","h1","Switch","span","Loader","ScrList","ul","Scr","li","ScrMain","useQuery","refetchInterval","isLoading","data","scrData","console","log","useState","findScr","setFindScr","kakao","window","useEffect","container","document","getElementById","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","options","center","maps","LatLng","level","map","Map","markerPosition","Marker","title","setMap","i","latlng","lng","imageSrc","process","imageSize","Size","markerImage","MarkerImage","markers","name","inventory","text","image","infoText","iwContent","infowindow","InfoWindow","content","removable","event","addListener","open","scrCode","code","mapOnClick","length","KakaoMapScript","setDarkAtom","useSetRecoilState","src","className","type","onChange","prev","id","style","width","height","to","pathname","state","addr","price","tel","regDt","openTime","Router","basename","path","darkTheme","bgColor","textColor","accentColor","lightTheme","GlobalStyle","createGlobalStyle","App","isDark","useRecoilValue","initialIsOpen","queryClient","QueryClient","ReactDOM","render","StrictMode","client"],"mappings":"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","file":"static/js/main.4683f1ce.chunk.js","sourcesContent":["const BASE_URL = `https://api.odcloud.kr/api/uws/v1/inventory?page=1&perPage=1200&`;\r\nconst API_KEY = `serviceKey=iVajbcB%2B7uBB9PieYeyeSvBXJElGL%2B2QZTU1nVnPjt7YvwDQcbIl7nNUIygDzGNAMXdO8nwl8%2BjlxgKtDmmTNQ%3D%3D`;\r\n\r\nexport function fetchScr() {\r\n    return fetch(`${BASE_URL}${API_KEY}`).then((response) =>\r\n        response.json()\r\n    );\r\n}\r\n","import { atom } from \"recoil\";\r\n\r\nexport const isDarkAtom = atom({\r\n    key: \"isDark\",\r\n    default: false,\r\n})","import { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport { useQuery } from \"react-query\";\r\nimport { fetchScr } from \"../api\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport { isDarkAtom } from \"../atoms\";\r\n\r\nconst Container = styled.div`\r\n    max-width: 100%;\r\n    margin: 0 auto;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    .infoText{\r\n        width: 375px;\r\n        font-size: 12px;\r\n        font-weight: bold;\r\n        text-align: center;\r\n        color:${(props) => props.theme.scrTextColor};\r\n        display: block;\r\n        }\r\n`;\r\n\r\nconst MapContainer = styled.div`\r\n    max-width: 375px;\r\n    width: 100%;\r\n    height: 100%;\r\n`;\r\nconst Header = styled.header`\r\n  width: 375px;\r\n  margin: 0 auto;\r\n  height: 10vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    \r\n`;\r\n\r\nconst Title = styled.h1`\r\n    margin: 0 auto;\r\n    max-width: 480px;\r\n    font-size: 25px;\r\n    color: #7d70db;\r\n    font-weight: bold;\r\n  img{\r\n      width: 25px;\r\n  }\r\n`;\r\n\r\nconst Switch = styled.span`\r\n    margin-left: 10px;\r\n.switch-button {\r\n       position: relative; \r\n       display: inline-block; \r\n       width: 50px; \r\n       height: 25px; \r\n    }\r\n    .switch-button input { \r\n        opacity: 0; \r\n        width: 0; \r\n        height: 0; \r\n    }\r\n    .onoff-switch {\r\n         position: absolute; \r\n         cursor: pointer; \r\n         top: 0; \r\n         left: 0; \r\n         right: 0; \r\n         bottom: 0; \r\n         border-radius:20px; \r\n         background-color: #ccc; \r\n         box-shadow: inset 1px 5px 1px #999; \r\n         -webkit-transition: .4s; \r\n         transition: .4s; \r\n        }\r\n        .onoff-switch:before {\r\n             position: absolute; \r\n             content: \"\"; \r\n             height: 18px; \r\n             width: 18px; \r\n             left: 4px; \r\n             bottom: 4px; \r\n             background-color: #fff; \r\n             -webkit-transition: .5s; \r\n             transition: .4s; \r\n             border-radius:20px; \r\n            }\r\n            .switch-button input:checked + .onoff-switch {\r\n                 background-color: #F2D522; \r\n                 box-shadow: inset 1px 5px 1px #E3AE56; \r\n                }\r\n            .switch-button input:checked + .onoff-switch:before {\r\n                 -webkit-transform: translateX(26px);\r\n                  -ms-transform: translateX(26px);\r\n                   transform: translateX(26px);\r\n                 }\r\n\r\n`;\r\n\r\nconst Loader = styled.span`\r\n  text-align: center;\r\n  display: block;\r\n`;\r\n\r\nconst ScrList = styled.ul`\r\n    width: 375px;\r\n    margin: 12px auto;\r\n`;\r\n\r\nconst Scr = styled.li`\r\n    background-color: white;\r\n    border-radius: 15px;\r\n    padding: 10px 20px;\r\n    line-height: 20px;\r\n    h1{\r\n        font-size: 20px;\r\n        font-weight: bold;\r\n        line-height: 25px;\r\n    }\r\n    h2{\r\n        font-size: 18px;\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\n\r\ninterface IScr {\r\n    addr: string,       //주유소 주소\r\n    code: string,       //주유소 코드\r\n    inventory: string,  //재고량\r\n    lat: string,        //주유소 위도\r\n    lng: string,        //주유소 경도\r\n    name: string,       //주유소 이름\r\n    openTime: string,   //영업시간\r\n    price: string,      //요소수 가격\r\n    regDt: string,      //업데이트 일시\r\n    tel: string,        //주유소 전화번호\r\n    color: string,      //잔량 수량 구간\r\n    data: any,\r\n}\r\n\r\ninterface IFindScr {\r\n    addr: string,       //주유소 주소\r\n    code: string,       //주유소 코드\r\n    inventory: string,  //재고량\r\n    lat: string,        //주유소 위도\r\n    lng: string,        //주유소 경도\r\n    name: string,       //주유소 이름\r\n    openTime: string,   //영업시간\r\n    price: string,      //요소수 가격\r\n    regDt: string,      //업데이트 일시\r\n    tel: string,        //주유소 전화번호\r\n    color: string,      //잔량 수량 구간\r\n}\r\n\r\nfunction ScrMain() {\r\n    const { isLoading, data } = useQuery<IScr>(\"allScr\", fetchScr, { refetchInterval: 300000, });\r\n    const scrData = data?.data;\r\n    console.log(data);\r\n\r\n    const [findScr, setFindScr] = useState<IFindScr>();\r\n\r\n\r\n    // 카카오맵 API\r\n    const { kakao } = window;\r\n\r\n    function KakaoMapScript() {\r\n        const container = document.getElementById('myMap');\r\n        const scrData = data?.data;\r\n\r\n        // 카카오맵, 현재위치\r\n        if (navigator.geolocation) {\r\n\r\n            navigator.geolocation.getCurrentPosition(function (position) {\r\n                let lat = position.coords.latitude;\r\n                let lon = position.coords.longitude;\r\n\r\n                const options = {\r\n                    center: new kakao.maps.LatLng(lat, lon),\r\n                    level: 5\r\n                }\r\n                const map = new kakao.maps.Map(container, options);\r\n\r\n                let markerPosition = new kakao.maps.LatLng(lat, lon);\r\n\r\n                let marker = new kakao.maps.Marker({\r\n                    position: markerPosition,\r\n                    title: \"현재 위치\"\r\n                });\r\n\r\n                marker.setMap(map);\r\n\r\n                // 주유소 마커 표시\r\n                for (let i = 0; i < scrData?.length; i++) {\r\n                    let latlng = new kakao.maps.LatLng(scrData[i].lat, scrData[i].lng);\r\n\r\n                    let imageSrc = `${process.env.PUBLIC_URL}/img/scrImg.png`;\r\n                    let imageSize = new kakao.maps.Size(35, 35);\r\n                    let markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize);\r\n\r\n                    let markers = new kakao.maps.Marker({\r\n                        map: map,\r\n                        position: latlng,\r\n                        title: scrData[i].name + scrData[i].inventory + \"L\",\r\n                        text: scrData[i].name + scrData[i].inventory + \"L\",\r\n                        image: markerImage\r\n                    });\r\n\r\n                    markers.setMap(map);\r\n\r\n                    // 주유소 마커 클릭시 정보 표시\r\n                    let infoText = `${scrData[i].name} 재고: ${scrData[i].inventory}L`;\r\n                    let iwContent = `\r\n                    <div style=\"padding:5px; width:300px;\">\r\n                    ${infoText}\r\n                    <br>\r\n                    <a href=\"https://map.kakao.com/link/map/${scrData[i].name},${scrData[i].lat},${scrData[i].lng}\" style=\"color:blue\" target=\"_blank\">큰지도보기</a> \r\n                    <a href=\"https://map.kakao.com/link/to/${scrData[i].name},${scrData[i].lat},${scrData[i].lng}\" style=\"color:blue\" target=\"_blank\">길찾기</a></div>'\r\n                    </div>`,\r\n                        iwRemoveable = true;\r\n\r\n                    let infowindow = new kakao.maps.InfoWindow({\r\n                        content: iwContent,\r\n                        removable: iwRemoveable\r\n                    });\r\n                    kakao.maps.event.addListener(markers, 'click', function () {\r\n                        infowindow.open(map, markers);\r\n\r\n                        function mapOnClick(scrCode: string) {\r\n                            if (scrData[i].code === scrCode) {\r\n                                const findScr = scrData[i];\r\n                                return findScr;\r\n                            }\r\n                        }\r\n\r\n                        const findScr = mapOnClick(scrData[i].code);\r\n                        setFindScr(findScr);\r\n\r\n                    }); // kakao addLister End\r\n\r\n                }\r\n            }\r\n            );\r\n        }   // if End\r\n    };  // KakaoMapScript() End\r\n    useEffect(() => {\r\n        KakaoMapScript();\r\n    }, [isLoading]);\r\n\r\n    const setDarkAtom = useSetRecoilState(isDarkAtom);\r\n    const toggleDarkAtom = () => setDarkAtom((prev) => !prev);\r\n\r\n    return (\r\n        <Container>\r\n            <Header>\r\n                <Title>\r\n                    <img src={`${process.env.PUBLIC_URL}/img/scrImg.png`}></img>\r\n                    요소수 재고 현황{isLoading ? \"(Loading...)\" : `(${scrData?.length})`}\r\n                    <Switch>\r\n                        <label className=\"switch-button\">\r\n                            <input type=\"checkbox\" onChange={toggleDarkAtom} ></input>\r\n                            <span className=\"onoff-switch\"></span>\r\n                        </label>\r\n                    </Switch>\r\n                </Title>\r\n            </Header>\r\n            <MapContainer>\r\n                <div id='myMap' style={{\r\n                    width: '375px',\r\n                    height: '450px'\r\n                }}>\r\n                </div>\r\n            </MapContainer>\r\n            <br />\r\n\r\n            {isLoading ? (\r\n                <Loader>Loading...</Loader>\r\n            ) : (\r\n                <>\r\n                    <span className=\"infoText\"> *5분마다 업데이트 되며 실제 재고와 차이가 있을 수 있습니다.</span>\r\n                    <ScrList>\r\n                        <Link to={{\r\n                            pathname: `/${findScr?.code}`,\r\n                            state: {\r\n                                name: findScr?.name,\r\n                                inventory: findScr?.inventory,\r\n                                addr: findScr?.addr,\r\n                                price: findScr?.price,\r\n                                tel: findScr?.tel,\r\n                                regDt: findScr?.regDt,\r\n                                lat: findScr?.lat,\r\n                                lng: findScr?.lng,\r\n                                openTime: findScr?.openTime,\r\n                            },\r\n                        }}>\r\n\r\n                            <Scr key={findScr?.code}>\r\n                                <h1>{findScr?.name}</h1> <br />\r\n                                <h2>재고: {findScr?.inventory} L</h2>\r\n                                <hr />\r\n                                주소: {findScr?.addr} <br />\r\n                                가격: {findScr?.price}원 <br />\r\n                                전화번호: {findScr?.tel} <br />\r\n                                <hr />\r\n                                최근 업데이트: {findScr?.regDt}\r\n                                <br />\r\n                            </Scr>\r\n                        </Link>\r\n                    </ScrList>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default ScrMain;","import { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport DetailScr from \"./routes/DetailScr\";\r\nimport ScrMain from \"./routes/ScrMain\";\r\n\r\nfunction Router() {\r\n    return (\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n            <Switch>\r\n                {/* <Route path={\"/:scrCode\"}>\r\n                    <DetailScr />\r\n                </Route> */}\r\n                <Route path=\"/\">\r\n                    <ScrMain />\r\n                </Route>\r\n            </Switch>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default Router;","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const darkTheme: DefaultTheme = {\r\n    bgColor: \"#2f3640\",\r\n    scrTextColor: \"white\",\r\n    textColor: \"#f5f6fa\",\r\n    accentColor: \"#7d70db\",\r\n};\r\n\r\nexport const lightTheme: DefaultTheme = {\r\n    bgColor: \"whitesmoke\",\r\n    scrTextColor: \"black\",\r\n    textColor: \"white\",\r\n    accentColor: \"#7d70db\",\r\n};","\nimport { createGlobalStyle, ThemeProvider } from \"styled-components\";\nimport Router from \"./Router\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\nimport { darkTheme, lightTheme } from \"./theme\";\nimport { RecoilRoot, useRecoilValue } from \"recoil\";\nimport { isDarkAtom } from \"./atoms\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\n  \n  html, body, div, span, applet, object, iframe,\n    h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n    a, abbr, acronym, address, big, cite, code,\n    del, dfn, em, img, ins, kbd, q, s, samp,\n    small, strike, strong, sub, sup, tt, var,\n    b, u, i, center,\n    dl, dt, dd, menu, ol, ul, li,\n    fieldset, form, label, legend,\n    table, caption, tbody, tfoot, thead, tr, th, td,\n    article, aside, canvas, details, embed,\n    figure, figcaption, footer, header, hgroup,\n    main, menu, nav, output, ruby, section, summary,\n    time, mark, audio, video {\n      margin: 0;\n      padding: 0;\n      border: 0;\n      font-size: 100%;\n      font: inherit;\n      vertical-align: baseline;\n    }\n    /* HTML5 display-role reset for older browsers */\n    article, aside, details, figcaption, figure,\n    footer, header, hgroup, main, menu, nav, section {\n      display: block;\n    }\n    /* HTML5 hidden-attribute fix for newer browsers */\n    *[hidden] {\n        display: none;\n    }\n    body {\n      line-height: 1;\n    }\n    menu, ol, ul {\n      list-style: none;\n    }\n    blockquote, q {\n      quotes: none;\n    }\n    blockquote:before, blockquote:after,\n    q:before, q:after {\n      content: '';\n      content: none;\n    }\n    table {\n      border-collapse: collapse;\n      border-spacing: 0;\n    }\n    *{\n      box-sizing: border-box;\n    }\n    body{\n     background-color: ${(props) => props.theme.bgColor};\n      overflow-x: hidden;\n    }\n    a{\n      text-decoration:none;\n      color:inherit;\n    }\n`;\n\nfunction App() {\n  const isDark = useRecoilValue(isDarkAtom);\n  return (\n    <>\n      <ThemeProvider theme={isDark ? lightTheme : darkTheme}>\n        <GlobalStyle />\n        <Router />\n        <ReactQueryDevtools initialIsOpen={true} />\n      </ThemeProvider>\n    </>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport { RecoilRoot } from 'recoil';\nimport App from './App';\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <QueryClientProvider client={queryClient}>\n        <App />\n      </QueryClientProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}